<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx.xsd">
           <!-- 分布式事物可行性配置 -->
	<bean name="dataSource1" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="XA1DBMS" />  
		<property name="url" value="${jdbc_url}" />
		<property name="user" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<property name="driverClassName" value="${driverClassName}" /> 

		<property name="poolSize" value="3" />  
    <property name="minPoolSize" value="10" />  
    <property name="maxPoolSize" value="100" />
	</bean>
	<bean id="dataSource2" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close"> 
	    <property name="uniqueResourceName" value="XA2DBMS" />
	    <!-- <property name="url" value="jdbc:sqlserver://localhost:1433;DatabaseName=FOUNSYS_STSF_HJYJY" /> -->
	    <property name="url" value="${sqlserver_url}" />
	    <property name="user" value="${sqlserver_user}"/>
	    <property name="password" value="${sqlserver_password}"/>
	    <property name="driverClassName" value="${sqlserverdriver}" />  
	    <property name="poolSize" value="3" />  
        <property name="minPoolSize" value="10" />  
        <property name="maxPoolSize" value="100" />
	    <!-- <property name="minEvictableIdleTimeMillis" value="300000"/> -->
 	</bean>
           
    <!--mqsql 使用AtomikosDataSourceBean配置方式，因为sqlserver用该方式不能连接数据库，所以暂不用该方式
    <bean id="dataSource1" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
	    <property name="uniqueResourceName" value="ds1"/>  
	    <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>  
	    <property name="xaProperties">  
	        <props>
	            <prop key="url">jdbc:mysql://47.94.170.102:3306/HospitalOrdering</prop>  
	            <prop key="user">root</prop>  
	            <prop key="password">prophetclouds.com2017</prop>  
	        </props>  
	    </property>  
	    <property name="minPoolSize" value="10" />  
	    <property name="maxPoolSize" value="100" />  
	    <property name="borrowConnectionTimeout" value="30" />  
	    <property name="testQuery" value="select 1" />  
	    <property name="maintenanceInterval" value="60" />  
	</bean> -->
	<!-- sqlserver 使用AtomikosDataSourceBean配置方式，但是sqlserver用该方式不能连接数据库，所以没有用
	<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
	    <property name="uniqueResourceName" value="ds2"/>  
	    <property name="xaDataSourceClassName" value="com.microsoft.sqlserver.jdbc.SQLServerXADataSource"/>  
	    <property name="xaProperties">  
	        <props>
                <prop key="serverName">jdbc:sqlserver://127.0.0.1:1433</prop>
                <prop key="databaseName">FOUNSYS_STSF_HJYJY</prop>
                <prop key="user">XAroot</prop>
                <prop key="password">root</prop>
            </props>  
	    </property>  
	    <property name="minPoolSize" value="10" />
        <property name="maxPoolSize" value="100" />
        <property name="borrowConnectionTimeout" value="30" />
        <property name="testQuery" value="select 1" />
        <property name="maintenanceInterval" value="60" />  
	</bean>  -->

 	 <!-- 配置数据源 -->
	<!-- sw<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" /> -->
		<!-- 初始化连接大小 -->
		<!-- sw<property name="initialSize" value="0" /> -->
		<!-- 连接池最大使用连接数量 -->
		<!-- sw<property name="maxActive" value="200" /> -->
		<!-- 连接池最小空闲 -->
		<!-- sw<property name="minIdle" value="0" /> -->
		<!-- 获取连接最大等待时间 -->
		<!-- sw<property name="maxWait" value="60000" /> -->
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小(是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭)
		<property name="poolPreparedStatements" value="true" /> 
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> 
		-->
		<!-- sw<property name="validationQuery" value="${validationQuery}" /> -->
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
		<!-- sw<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" /> -->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- sw<property name="timeBetweenEvictionRunsMillis" value="60000" /> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="25200000" /> -->
		<!-- 打开removeAbandoned功能 -->
		<!-- sw<property name="removeAbandoned" value="true" /> -->
		<!-- 1800秒，也就是30分钟(连接租用时间超时会自动关闭此连接) -->
		<!-- sw<property name="removeAbandonedTimeout" value="1800" /> -->
		<!-- 关闭abanded连接时输出错误日志 -->
		<!-- sw<property name="logAbandoned" value="true" /> -->
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!-- sw<property name="filters" value="mergeStat" />
	</bean> --> 
	<!-- 配置druid监控spring jdbc -->
		<!-- sw<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
			<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
				<property name="patterns">
					<list>
						<value>com.mall.service.impl.*</value>
					</list>
				</property>
			</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config> -->
 	
</beans>